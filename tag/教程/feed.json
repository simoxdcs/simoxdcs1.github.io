{
    "version": "https://jsonfeed.org/version/1",
    "title": "欲买桂花同载酒，终不似，少年游。 • All posts by \"教程\" tag",
    "description": "emmmmm",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2020/11/18/linux%E6%8D%A2%E6%BA%90/",
            "url": "http://example.com/2020/11/18/linux%E6%8D%A2%E6%BA%90/",
            "title": "linux相关",
            "date_published": "2020-11-18T06:20:02.000Z",
            "content_html": "<p>## 第一章</p>\n<p>因为我 Linux 也是才开始用。。结果自己就遇到了很多麻烦的事情。。就自己在网上东扒西找的姑且算是解决了。。就自己写个东西一面自己在遇到的时候又不会了。。<br>\n换源：<br>\nsudo pacman-mirrors -i -c China -m rank  更新镜像<br>\n sudo vim /etc/pacman.d/mirrorlist  查看选择的源<br>\n sudo vim /etc/pacman.conf  设置源（可以自己添加源链接进去）</p>\n<p>我用的是 manjaro 这个 archlinux 的衍生版本。。还算是怪好用的<br>\n更新 ：<br>\n1.sudo pacman -S cuda 安装<br>\n 2.pacman -Syu 更新系统<br>\n 3.pacman -Syy 强制更新<br>\n 4.pacman -Ss keyword\t在仓库中搜索含关键字的包（常用）<br>\n5.pacman -Qs keyword\t搜索已安装的包（常用）\t<br>\n6.pacman -Qi package_name\t查询本地安装包的详细信息<br>\n 7.pacman -Ql package_name\t列出该包的文件<br>\n 8.pacman -Fs keyword\t按文件名查找软件库<br>\n 9.pacman -Si package_name\t显示远程软件包的详尽的信息<br>\n 10.pacman -Qii package_name\t使用两个 -i 将同时显示备份文件和修改状态<br>\n 11.pacman -Ql package_name\t要获取已安装软件包所包含文件的列表<br>\n 12.pacman -Fl package_name\t查询远程库中软件包包含的文件<br>\n 13.pacman -Qk package_name\t检查软件包安装的文件是否都存在<br>\n 14.pacman -Fo /path/to/file_name\t查询文件属于远程数据库中的哪个软件包<br>\n 15.pacman -Qdt\t要罗列所有不再作为依赖的软件包 (孤立 orphans)<br>\n 16.pacman -Qet\t要罗列所有明确安装而且不被其它包依赖的软件包<br>\n 17.pactree package_name\t要显示软件包的依赖树<br>\n 18.whoneeds package_name\t检查一个安装的软件包被那些包依赖<br>\n 19.pactree -r package_name\t检查一个安装的软件包被那些包依赖<br>\n 20…pacman -Sw package_name\t只下载包，不安装。<br>\n21.pacman -Sc\t清理未安装的包文件（常用）包文件位于 /var/cache/pacman/pkg/ 目录<br>\n 22.pacman -Scc\t清理所有的缓存文件（常用）<br>\n23.pacman -R package_name\t该命令将只删除包，保留其全部已经安装的依赖关系<br>\n 24.pacman -Rs package_name\t在删除包的同时，删除其所有没有被其他已安装软件包使用的依赖关系（常用）<br>\n25.pacman -Rsc package_name\t在删除包的同时，删除所有依赖这个软件包的程序<br>\n 26.pacman -Rd package_name\t在删除包时不检查依赖<br>\n 8.pacman -Fs keyword    按文件名查找软件库<br>\n 9.pacman -Si package_name       显示远程软件包的详尽的信息<br>\n 10.pacman -Qii package_name     使用两个 -i 将同时显示备份文件和修改状态<br>\n 11.pacman -Ql package_name      要获取已安装软件包所包含文件的列表<br>\n 12.pacman -Fl package_name      查询远程库中软件包包含的文件<br>\n 13.pacman -Qk package_name      检查软件包安装的文件是否都存在<br>\n 14.pacman -Fo /path/to/file_name        查询文件属于远程数据库中的哪个软件包<br>\n 15.pacman -Qdt  要罗列所有不再作为依赖的软件包 (孤立 orphans)<br>\n 16.pacman -Qet  要罗列所有明确安装而且不被其它包依赖的软件包<br>\n 17.pactree package_name 要显示软件包的依赖树<br>\n 18.whoneeds package_name        检查一个安装的软件包被那些包依赖<br>\n 19.pactree -r package_name      检查一个安装的软件包被那些包依赖<br>\n 20…pacman -Sw package_name     只下载包，不安装。<br>\n21.pacman -Sc   清理未安装的包文件（常用）包文件位于 /var/cache/pacman/pkg/ 目录<br>\n 22.pacman -Scc  清理所有的缓存文件（常用）<br>\n23.pacman -R package_name       该命令将只删除包，保留其全部已经安装的依赖关系<br>\n 24.pacman -Rs package_name      在删除包的同时，删除其所有没有被其他已安装软件包<br>\n使用的依赖关系（常用）<br>\n25.pacman -Rsc package_name     在删除包的同时，删除所有依赖这个软件包的程序<br>\n 26.pacman -Rd package_name      在删除包时不检查依赖<br>\n 27.pacman -S package_name\t执行 pacman -S firefox 将安装 Firefox（常用）\t你也可以同时安装多个包，只需以空格分隔包名即<br>\n pacman -Sy package_name\t与上面命令不同的是，该命令将在同步包数据库后再执行安装。28.pacman -Sv package_name\t在显示一些操作信息后执行安装。\t<br>\n29.pacman -U local_package_name\t安装本地包，其扩展名为 pkg.tar.gz 或 pkg.tar.xz\t30.pacman -U url\t安装一个远程包（不在 pacman 配置的源里面）</p>\n<p>姑且先写这么多。。不够的以后再补上吧。</p>\n",
            "tags": [
                "教程"
            ]
        },
        {
            "id": "http://example.com/2020/11/18/%E6%95%99%E7%A8%8B/",
            "url": "http://example.com/2020/11/18/%E6%95%99%E7%A8%8B/",
            "title": "博客教程",
            "date_published": "2020-11-18T06:07:53.000Z",
            "content_html": "<p>## 第一章</p>\n<p>搭建 hexo 博客需要的几样东西：<br>\n1. 一台联网的电脑    2.git    3.nodejs    4. 脑子    5. 手（狗头保命<br>\n几个必须的较长的命令：<br>\n1.（安装国内的 cnpm (淘宝源)）npm install -g cnpm --registry=https://registry.npm.taobao.org<br>\n2.（安装 hexo 框架）cnpm install -g hexo-cli<br>\n3.（安装部署到远端的 hexo 工具）cnpm install --save hexo-deployer-git<br>\n 注意事项：<br>\n1. 在部署到远端之前记得先本地生成预览一下<br>\n 2. 部署到 GitHub 服务器之前记得往博客里面添加 GitHub 的账号信息<br>\n 3. 如果部署到远端失败就尝试推倒墙娘然后再试一次。<br>\n4. 在 config 里面最下方的 repo 后面写 GitHub 给的链接，在 branch 后面填 master<br>\n（第一次写也就写成这样了。。估计也就我自己看得懂。。。）</p>\n",
            "tags": [
                "教程"
            ]
        }
    ]
}